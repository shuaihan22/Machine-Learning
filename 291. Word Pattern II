Given a pattern and a string str, find if str follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty substring in str.

Examples:
pattern = "abab", str = "redblueredblue" should return true.
pattern = "aaaa", str = "asdasdasdasd" should return true.
pattern = "aabb", str = "xyzabcxzyabc" should return false.
Notes:
You may assume both pattern and str contains only lowercase letters.

class Solution {
    public boolean wordPatternMatch(String pattern, String str) {
        return check(str, 0, pattern, 0, new HashMap<Character, String>(), new HashSet<String>());
    }
    private boolean check(String str, int i, String pat, int j, Map<Character, String> map, Set<String> set) {
            // base case
        if (i == str.length() && j == pat.length()) return true;
        if (i == str.length() || j == pat.length()) return false;
        char c = pat.charAt(j);
        if (map.containsKey(c)) {
          String s = map.get(c);
            //boolean startsWith(String str, index fromIndex): It returns true if the String begins with str, it starts looking from the specified index “fromIndex”.
          if (!str.startsWith(s, i)) {
            return false;
          }
          return check(str, i + s.length(), pat, j + 1, map, set);
        }
        for (int k = i; k < str.length(); k++) {
              String p = str.substring(i, k + 1);
              if (set.contains(p)) {
                continue;
              }
              map.put(c, p);
              set.add(p);
              if (check(str, k + 1, pat, j + 1, map, set)) {
                return true;
              }
              map.remove(c);
              set.remove(p);
        }
        return false;
    }
}
