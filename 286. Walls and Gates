You are given a m x n 2D grid initialized with these three possible values.

-1 - A wall or an obstacle.
0 - A gate.
INF - Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.
Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.

For example, given the 2D grid:
INF  -1  0  INF
INF INF INF  -1
INF  -1 INF  -1
  0  -1 INF INF
After running your function, the 2D grid should be:
  3  -1   0   1
  2   2   1  -1
  1  -1   2  -1
  0  -1   3   4


class Solution {
    class Pair{
        int i;
        int j;
        int val;
        public Pair(int i, int j, int val) {
            this.i = i;
            this.j = j;
            this.val = val;
        }
    }
    public void wallsAndGates(int[][] rooms) {
        if(rooms.length == 0) return;
        boolean[][] visited = new boolean[rooms.length][rooms[0].length];
        Queue<Pair> queue = new LinkedList<Pair>();
        for(int i = 0; i < rooms.length; i++) {
            for (int j = 0; j < rooms[0].length; j++) {
                if(rooms[i][j] == 0) {
                    visited[i][j] = true;
                    Pair p = new Pair(i, j, rooms[i][j]);
                    queue.offer(p);
                }
            }
        }
        while(!queue.isEmpty()) {
            Pair pair = queue.poll();
            if(pair.i + 1 < rooms.length && !visited[pair.i + 1][pair.j] && rooms[pair.i + 1][pair.j] == 2147483647) {
                rooms[pair.i + 1][pair.j] = pair.val + 1;
                queue.offer(new Pair(pair.i + 1, pair.j, rooms[pair.i + 1][pair.j]));
            }
            if(pair.j + 1 < rooms[0].length && !visited[pair.i][pair.j + 1] && rooms[pair.i][pair.j + 1] == 2147483647) {
                rooms[pair.i][pair.j + 1] = pair.val + 1;
                queue.offer(new Pair(pair.i, pair.j + 1, rooms[pair.i][pair.j + 1]));
            }
            if(pair.i - 1 >= 0 && !visited[pair.i - 1][pair.j] && rooms[pair.i - 1][pair.j] == 2147483647) {
                rooms[pair.i - 1][pair.j] = pair.val + 1;
                queue.offer(new Pair(pair.i - 1, pair.j, rooms[pair.i - 1][pair.j]));
            }
            if(pair.j - 1 >= 0 && !visited[pair.i][pair.j - 1] && rooms[pair.i][pair.j - 1] == 2147483647) {
                rooms[pair.i][pair.j - 1] = pair.val + 1;
                queue.offer(new Pair(pair.i, pair.j - 1, rooms[pair.i][pair.j - 1]));
            }
        }
    }
}
