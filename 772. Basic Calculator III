https://leetcode.com/problems/basic-calculator-iii/discuss/113592/Development-of-a-generic-solution-for-the-series-of-the-calculator-problems
https://discuss.leetcode.com/topic/118434/development-of-a-generic-solution-for-the-series-of-the-calculator-problems

Implement a basic calculator to evaluate a simple expression string.

The expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .

The expression string contains only non-negative integers, +, -, *, / operators , open ( and closing parentheses ) and empty spaces . The integer division should truncate toward zero.

You may assume that the given expression is always valid. All intermediate results will be in the range of [-2147483648, 2147483647].

Some examples:

"1 + 1" = 2
" 6-4 / 2 " = 4
"2*(5+5*2)/3+(6/2+8)" = 21
"(2+6* 3+5- (3*14/7+2)*5)+3"=-12
 

Note: Do not use the eval built-in library function.


class Solution {
    public int calculate(String s) {
    int l1 = 0, o1 = 1;
    int l2 = 1, o2 = 1;
        
    for (int i = 0; i < s.length(); i++) {
        char c = s.charAt(i);
            
        if (Character.isDigit(c)) {
            int num = c - '0';
                
            while (i + 1 < s.length() && Character.isDigit(s.charAt(i + 1))) {
                num = num * 10 + (s.charAt(++i) - '0');
            }
            
            l2 = (o2 == 1 ? l2 * num : l2 / num);
                
        } else if (c == '(') {
            int j = i;
                
            for (int cnt = 0; i < s.length(); i++) {
                if (s.charAt(i) == '(') cnt++;
                if (s.charAt(i) == ')') cnt--;
                if (cnt == 0) break;
            }
            
            int num = calculate(s.substring(j + 1, i));
            
            l2 = (o2 == 1 ? l2 * num : l2 / num);
                
        } else if (c == '*' || c == '/') {
            o2 = (c == '*' ? 1 : -1);
                
        } else if (c == '+' || c == '-') {
            l1 = l1 + o1 * l2;
            o1 = (c == '+' ? 1 : -1);

            l2 = 1; o2 = 1;
        }
    }
        
    return (l1 + o1 * l2);
    }
}



boolean isDigit(char ch) {
      return ch >= '0' && ch <= '9';
  }
  
  int calc(int op2, int op1, char ch) {
      switch(ch) {
      case '-': return op1 - op2;
      case '+': return op1 + op2;
      case '/': return op1 / op2;
      case '*': return op1 * op2;
      }
      return 0;
  }
  boolean higherPriority(char op1, char op2) {
      if ((op1 =='*') || (op1 =='/')) 
          return true;
      if ((op2 =='+') || (op2 =='-')) 
          return true;
      return false;
      
  }
  
  int simpleCalculator(String exp) {
      
      Stack<Integer> st = new Stack<>();
      Stack<Character> op = new Stack<>();
      int digit = 0;
      boolean hasDigit = false;
      for (int i = 0; i < exp.length(); i++) {
          if (isDigit(exp.charAt(i))) {
              hasDigit = true;
              digit = digit*10 + (exp.charAt(i) - '0');
          } else {
              if(hasDigit) {
                  hasDigit = false;
                  st.push(digit);
                  digit = 0;
              }
              if (exp.charAt(i) == '(') {          
                  op.push('(');
              } else if(exp.charAt(i) == ')') {                  
                  while (op.peek() != '(') {                       
                      st.push(calc(st.pop(), st.pop(), op.pop()));
                  }
                  op.pop();
                 
              } else {                   
                   while (!op.isEmpty() && op.peek() != '(' && higherPriority(op.peek(), exp.charAt(i))) {                             
                       st.push(calc(st.pop(), st.pop(), op.pop()));
                   }               
                  
                  op.push(exp.charAt(i));
              }
          }
      }
      if(hasDigit)
          st.push(digit);
      while(!op.isEmpty()) {
          st.push(calc(st.pop(), st.pop(), op.pop()));
      }
      return st.peek();
  }
}
